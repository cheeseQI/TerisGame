DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 00110000010000000000000000000000; -- addi $1 $0 0   # n1-n4 #####################################################

0001 : 00110000100000000000000000000000; -- addi $2 $0 0

0002 : 00110000110000000000000000000000; -- addi $3 $0 0

0003 : 00110001000000000000000000000000; -- addi $4 $0 0

0004 : 00110011000110000000000000000000; -- addi $12 $12 0   #score

0005 : 01111011000000000000000000000000; -- output $12

0006 : 00110011010000000000000100101100; -- addi $13 $0 300   # r13 = 200 - dmem start address(block[0])

0007 : 00110011100000000000000111110100; -- addi $14 $0 500   # end address 

0008 : 01000000000110100000000000000000; -- sw   $0  0($13) #clean all block##########################################################

0009 : 00110011010110100000000000000001; -- addi $13 $13 1

0010 : 01010011100110111111111111111101; -- bgt  $14 $13 clean # until $13 >= 300

0011 : 00110111110000000000000000101010; -- addi $31 $0 42 ##########################################set default jump register################!!!!!!!!!!!!!!!!!!!!!11

0012 : 00110111100000000000000100101100; -- addi $30 $0 300 #############set out of left boarder start########

0013 : 00110111010000000000000111110011; -- addi $29 $0 499 

0014 : 00110111000000000000000000000011; -- addi $28 $0 3 #stuck constant

0015 : 01000111001111000000000000000000; -- sw $28 0($30)

0016 : 00110111101111000000000000001010; -- addi $30 $30 10

0017 : 01010111011111011111111111111101; -- bgt $29 $30 addLeftBoarder

0018 : 00110111100000000000000100110101; -- addi $30 $0 309 #############set out of left boarder start########

0019 : 00110111010000000000000111110100; -- addi $29 $0 500 

0020 : 01000111001111000000000000000000; -- sw $28 0($30)

0021 : 00110111101111000000000000001010; -- addi $30 $30 10

0022 : 01010111011111011111111111111101; -- bgt $29 $30 addRightBoarder

0023 : 00110111100000000000000111101010; -- addi $30 $0 490 #############set out of left boarder start########

0024 : 00110111010000000000000111110100; -- addi $29 $0 500

0025 : 01000111001111000000000000000000; -- sw $28 0($30)

0026 : 00110111101111000000000000000001; -- addi $30 $30 1

0027 : 01010111011111011111111111111101; -- bgt $29 $30 addDownBoarder

0028 : 00110010010000000000000000000001; -- addi $9 $0 1

0029 : 00110100000000000000000000010011; -- addi $16 $0 19

0030 : 00100010010100110000000000000000; -- sll $9 $9 $16 # 2^19 speed controller#############################################

0031 : 00110100110000000000000100101100; -- addi $19 $0 300 # start from 300 in demem ###########update block################################

0032 : 00110100000000000000000000010100; -- addi $16 $0 20

0033 : 00110100010000000000000000000001; -- addi $17 $0 1 

0034 : 00100100001000110000000000000000; -- sll  $16 $17 $16    # 2^20 trigger  block.mif(vga reading) and also the vga_addr ++

0035 : 00111100101001100000000000000000; -- lw $18 0($19) # load block type info (0,1,3) in temp reg 

0036 : 01000100101000000000000000000000; -- sw $18 0($16) # only used for vga, too large for dmem addr, will not store

0037 : 00110100001000000000000000000001; -- addi $16 $16 1 # only used for vga

0038 : 00110100111001100000000000000001; -- addi $19 $19 1 # only used for counting and load

0039 : 01010011101001111111111111111011; -- bgt  $14 $19 -5 # check whether reach end

0040 : 01011111110000000000000000000000; -- jr $31

0041 : 00110011110000000000000000000001; -- addi $15 $0 1 #####################main loop############################################

0042 : 00110001110000000000000000010100; -- addi $7 $0 20

0043 : 00100001110111100111000000000000; -- sll  $7 $15 $7       # trigger block & random 1000...000 

0044 : 00111001100011100000000000000000; -- lw   $6 0($7)        # read random number->random block;

0045 : 00110011010000000000000100101100; -- addi $13 $0 300 # initialize start addi

0046 : 00110011110000000000000000000000; -- addi $15 $0 0

0047 : 00110100000000000000000000000001; -- addi $16 $0 1

0048 : 00110100010000000000000000000010; -- addi $17 $0 2

0049 : 00110100100000000000000000000011; -- addi $18 $0 3

0050 : 00110100110000000000000000000100; -- addi $19 $0 4

0051 : 00110001010000000000000000000000; -- addi $5 $0 0 # set initial rotate type

0052 : 01001001100111100000000000110001; -- beq $6 $15 createShape0

0053 : 01001001101000000000000001000100; -- beq $6 $16 createShape1

0054 : 01001001101000100000000001010111; -- beq $6 $17 createShape2

0055 : 01001001101001000000000001101010; -- beq $6 $18 createShape3

0056 : 01001001101001100000000001111101; -- beq $6 $19 createShape4

0057 : 00110010100000000000000000000000; -- addi $10 $0 0 # counter

0058 : 00110101000000000000000001100001; -- addi $20 $0 97     # r20 key "a"  97 #########################movement#####################

0059 : 00110101010000000000000001100100; -- addi $21 $0 100    # r21 key "d" 100

0060 : 00110101100000000000000001110111; -- addi $22 $0 119    # r22 for key "w" 119

0061 : 00110101110000000000000001110011; -- addi $23 $0 115		# r23 for key"s" 113

0062 : 00110110000000000000000001110000; -- addi $24 $0 112     # r24 for "p"

0063 : 00110110010000000000000001101000; -- addi $25 $0 104        # r25 for "h"

0064 : 01110010110000000000000000000000; -- input $11           # r12 used for input signal

0065 : 01001010111010000000000010001000; -- beq $11 $20 left

0066 : 01001010111010100000000010100011; -- beq $11 $21 right #################need other input######################################################

0067 : 01001010111011000000000011101011; -- beq $11 $22 rotate

0068 : 01001010111011100000000000000100; -- beq $11 $23 down

0069 : 01001010111100100000000111101110; -- beq $11 $25 hardMode

0070 : 01001010111100000000000010111100; -- beq $11 $24 interrupt

0071 : 00110010100101000000000000000001; -- addi $10 $10 1 # counter++

0072 : 01010010010101011111111111110001; -- bgt $9 $10 movement # if N still > c loop again

0073 : 00110011110000100000000000001010; -- addi $15 $1 10

0074 : 00110100000001000000000000001010; -- addi $16 $2 10

0075 : 00110100010001100000000000001010; -- addi $17 $3 10

0076 : 00110100100010000000000000001010; -- addi $18 $4 10 

0077 : 00111110010111100000000000000000; -- lw $25 0($15)

0078 : 00110111100000000000000000000011; -- addi $30 $0 3

0079 : 01001110011111000000000010110111; -- beq $25 $30 checkClear

0080 : 00111110011000000000000000000000; -- lw $25 0($16)

0081 : 01001110011111000000000010110101; -- beq $25 $30 checkClear

0082 : 00111110011000100000000000000000; -- lw $25 0($17)

0083 : 01001110011111000000000010110011; -- beq $25 $30 checkClear

0084 : 00111110011001000000000000000000; -- lw $25 0($18)

0085 : 01001110011111000000000010110001; -- beq $25 $30 checkClear #check whether meet stuck

0086 : 01000000000000100000000000000000; -- sw $0 0($1) # original block to be blank(0)

0087 : 01000000000001000000000000000000; -- sw $0 0($2)

0088 : 01000000000001100000000000000000; -- sw $0 0($3)

0089 : 01000000000010000000000000000000; -- sw $0 0($4)

0090 : 00110000010000100000000000001010; -- addi $1 $1 10 # move down

0091 : 00110110100000000000000000000001; -- addi $26 $0 1 # valid bit = 1

0092 : 01000110100000100000000000000000; -- sw $26 0($1) # store in dmem

0093 : 00110000100001000000000000001010; -- addi $2 $2 10

0094 : 01000110100001000000000000000000; -- sw $26 0($2) 

0095 : 00110000110001100000000000001010; -- addi $3 $3 10 

0096 : 01000110100001100000000000000000; -- sw $26 0($3) 

0097 : 00110001000010000000000000001010; -- addi $4 $4 10

0098 : 01000110100010000000000000000000; -- sw $26 0($4)

0099 : 01101000000000000000000000011111; -- jal updateBlock

0100 : 01010010010101011111111111100010; -- bgt $9 $10 endmove

0101 : 01100000000000000000000000111001; -- j movementBegin # back to moveBegin

0102 : 00110000010110100000000000000011; -- addi $1 $13 3 # set n1 - n4 ##########################createShape()#############################################

0103 : 00110000100110100000000000000100; -- addi $2 $13 4

0104 : 00110000110110100000000000000101; -- addi $3 $13 5

0105 : 00110001000110100000000000000110; -- addi $4 $13 6

0106 : 00110111100000000000000000000011; -- addi $30 $0 3 #stuck constant 3

0107 : 00111011110000100000000000000000; -- lw $15 0($1) 

0108 : 01001011111111000000000010010101; -- beq $15 $30 gameOver # check whether meets stuck block

0109 : 00111011110001000000000000000000; -- lw $15 0($2) 

0110 : 01001011111111000000000010010011; -- beq $15 $30 gameOver

0111 : 00111011110001100000000000000000; -- lw $15 0($3) 

0112 : 01001011111111000000000010010001; -- beq $15 $30 gameOver

0113 : 00111011110010000000000000000000; -- lw $15 0($4) 

0114 : 01001011111111000000000010001111; -- beq $15 $30 gameOver

0115 : 00110100000000000000000000000001; -- addi $16 $0 1 # constant 1

0116 : 01000100000000100000000000000000; -- sw $16 0($1) # constant 1 store into n1 block(valid) 

0117 : 01000100000001000000000000000000; -- sw $16 0($2)

0118 : 01000100000001100000000000000000; -- sw $16 0($3)

0119 : 01000100000010000000000000000000; -- sw $16 0($4) # constant 1 store into n4 block(valid) 

0120 : 01101000000000000000000000011111; -- jal updateBlock #update back

0121 : 01100000000000000000000000111001; -- j movementBegin

0122 : 00110000010110100000000000000100; -- addi $1 $13 4 # set n1 - n4

0123 : 00110000100110100000000000000101; -- addi $2 $13 5

0124 : 00110000110110100000000000000110; -- addi $3 $13 6

0125 : 00110001000110100000000000001111; -- addi $4 $13 15

0126 : 00110111100000000000000000000011; -- addi $30 $0 3 #stuck constant 3

0127 : 00111011110000100000000000000000; -- lw $15 0($1) 

0128 : 01001011111111000000000010000001; -- beq $15 $30 gameOver # check whether meets stuck block

0129 : 00110100000000000000000000000001; -- addi $16 $0 1 

0130 : 01000100000000100000000000000000; -- sw $16 0($1) # constant 1 store into n1 block(valid) 

0131 : 00111011110001000000000000000000; -- lw $15 0($2) 

0132 : 01001011111111000000000001111101; -- beq $15 $30 gameOver

0133 : 01000100000001000000000000000000; -- sw $16 0($2) # constant 1 store into n2 block(valid) 

0134 : 00111011110001100000000000000000; -- lw $15 0($3) 

0135 : 01001011111111000000000001111010; -- beq $15 $30 gameOver

0136 : 01000100000001100000000000000000; -- sw $16 0($3) # constant 1 store into n3 block(valid) 

0137 : 00111011110010000000000000000000; -- lw $15 0($4) 

0138 : 01001011111111000000000001110111; -- beq $15 $30 gameOver

0139 : 01000100000010000000000000000000; -- sw $16 0($4) # constant 1 store into n4 block(valid) 

0140 : 01101000000000000000000000011111; -- jal updateBlock #update back

0141 : 01100000000000000000000000111001; -- j movementBegin

0142 : 00110000010110100000000000000101; -- addi $1 $13 5 # set n1 - n4

0143 : 00110000100110100000000000001111; -- addi $2 $13 15

0144 : 00110000110110100000000000011001; -- addi $3 $13 25

0145 : 00110001000110100000000000011000; -- addi $4 $13 24

0146 : 00110111100000000000000000000011; -- addi $30 $0 3 #stuck constant 3

0147 : 00111011110000100000000000000000; -- lw $15 0($1) 

0148 : 01001011111111000000000001101101; -- beq $15 $30 gameOver # check whether meets stuck block

0149 : 00110100000000000000000000000001; -- addi $16 $0 1 

0150 : 01000100000000100000000000000000; -- sw $16 0($1) # constant 1 store into n1 block(valid) 

0151 : 00111011110001000000000000000000; -- lw $15 0($2) 

0152 : 01001011111111000000000001101001; -- beq $15 $30 gameOver

0153 : 01000100000001000000000000000000; -- sw $16 0($2) # constant 1 store into n2 block(valid) 

0154 : 00111011110001100000000000000000; -- lw $15 0($3) 

0155 : 01001011111111000000000001100110; -- beq $15 $30 gameOver

0156 : 01000100000001100000000000000000; -- sw $16 0($3) # constant 1 store into n3 block(valid) 

0157 : 00111011110010000000000000000000; -- lw $15 0($4) 

0158 : 01001011111111000000000001100011; -- beq $15 $30 gameOver

0159 : 01000100000010000000000000000000; -- sw $16 0($4) # constant 1 store into n4 block(valid) 

0160 : 01101000000000000000000000011111; -- jal updateBlock #update back

0161 : 01100000000000000000000000111001; -- j movementBegin

0162 : 00110000010110100000000000000101; -- addi $1 $13 5 # set n1 - n4

0163 : 00110000100110100000000000000110; -- addi $2 $13 6

0164 : 00110000110110100000000000001110; -- addi $3 $13 14

0165 : 00110001000110100000000000001111; -- addi $4 $13 15

0166 : 00110111100000000000000000000011; -- addi $30 $0 3 #stuck constant 3

0167 : 00111011110000100000000000000000; -- lw $15 0($1) 

0168 : 01001011111111000000000001011001; -- beq $15 $30 gameOver # check whether meets stuck block

0169 : 00110100000000000000000000000001; -- addi $16 $0 1 

0170 : 01000100000000100000000000000000; -- sw $16 0($1) # constant 1 store into n1 block(valid) 

0171 : 00111011110001000000000000000000; -- lw $15 0($2) 

0172 : 01001011111111000000000001010101; -- beq $15 $30 gameOver

0173 : 01000100000001000000000000000000; -- sw $16 0($2) # constant 1 store into n2 block(valid) 

0174 : 00111011110001100000000000000000; -- lw $15 0($3) 

0175 : 01001011111111000000000001010010; -- beq $15 $30 gameOver

0176 : 01000100000001100000000000000000; -- sw $16 0($3) # constant 1 store into n3 block(valid) 

0177 : 00111011110010000000000000000000; -- lw $15 0($4) 

0178 : 01001011111111000000000001001111; -- beq $15 $30 gameOver

0179 : 01000100000010000000000000000000; -- sw $16 0($4) # constant 1 store into n4 block(valid) 

0180 : 01101000000000000000000000011111; -- jal updateBlock #update back

0181 : 01100000000000000000000000111001; -- j movementBegin

0182 : 00110000010110100000000000000100; -- addi $1 $13 4 # set n1 - n4

0183 : 00110000100110100000000000000101; -- addi $2 $13 5

0184 : 00110000110110100000000000001110; -- addi $3 $13 14

0185 : 00110001000110100000000000001111; -- addi $4 $13 15

0186 : 00110111100000000000000000000011; -- addi $30 $0 3 #stuck constant 3

0187 : 00111011110000100000000000000000; -- lw $15 0($1) 

0188 : 01001011111111000000000001000101; -- beq $15 $30 gameOver # check whether meets stuck block

0189 : 00110100000000000000000000000001; -- addi $16 $0 1 

0190 : 01000100000000100000000000000000; -- sw $16 0($1) # constant 1 store into n1 block(valid) 

0191 : 00111011110001000000000000000000; -- lw $15 0($2) 

0192 : 01001011111111000000000001000001; -- beq $15 $30 gameOver

0193 : 01000100000001000000000000000000; -- sw $16 0($2) # constant 1 store into n2 block(valid) 

0194 : 00111011110001100000000000000000; -- lw $15 0($3) 

0195 : 01001011111111000000000000111110; -- beq $15 $30 gameOver

0196 : 01000100000001100000000000000000; -- sw $16 0($3) # constant 1 store into n3 block(valid) 

0197 : 00111011110010000000000000000000; -- lw $15 0($4) 

0198 : 01001011111111000000000000111011; -- beq $15 $30 gameOver

0199 : 01000100000010000000000000000000; -- sw $16 0($4) # constant 1 store into n4 block(valid) 

0200 : 01101000000000000000000000011111; -- jal updateBlock #update back

0201 : 01100000000000000000000000111001; -- j movementBegin

0202 : 00110011110000111111111111111111; -- addi $15 $1 -1

0203 : 00110100000001011111111111111111; -- addi $16 $2 -1

0204 : 00110100010001111111111111111111; -- addi $17 $3 -1

0205 : 00110100100010011111111111111111; -- addi $18 $4 -1 #left shift

0206 : 00110111100000000000000000000011; -- addi $30 $0 3 #constant 3

0207 : 00111110010111100000000000000000; -- lw $25 0($15)

0208 : 01001110011111011111111101110110; -- beq $25 $30 endmove

0209 : 00111110011000000000000000000000; -- lw $25 0($16)

0210 : 01001110011111011111111101110100; -- beq $25 $30 endmove

0211 : 00111110011000100000000000000000; -- lw $25 0($17)

0212 : 01001110011111011111111101110010; -- beq $25 $30 endmove

0213 : 00111110011001000000000000000000; -- lw $25 0($18)

0214 : 01001110011111011111111101110000; -- beq $25 $30 endmove #check whether meet stuck

0215 : 00110110100000000000000000000001; -- addi $26 $0 1 # valid bit = 1

0216 : 01000000000000100000000000000000; -- sw $0 0($1) # original block to be blank(0)

0217 : 01000000000001000000000000000000; -- sw $0 0($2) # original block to be blank(0)

0218 : 01000000000001100000000000000000; -- sw $0 0($3) # original block to be blank(0)

0219 : 01000000000010000000000000000000; -- sw $0 0($4) # original block to be blank(0)

0220 : 00110000010000111111111111111111; -- addi $1 $1 -1 # move left

0221 : 01000110100000100000000000000000; -- sw $26 0($1) 

0222 : 00110000100001011111111111111111; -- addi $2 $2 -1 # move left

0223 : 01000110100001000000000000000000; -- sw $26 0($2)

0224 : 00110000110001111111111111111111; -- addi $3 $3 -1 # move left

0225 : 01000110100001100000000000000000; -- sw $26 0($3) 

0226 : 00110001000010011111111111111111; -- addi $4 $4 -1 # move left

0227 : 01000110100010000000000000000000; -- sw $26 0($4) 

0228 : 01101000000000000000000000011111; -- jal updateBlock

0229 : 01100000000000000000000001000111; -- j endmove

0230 : 00110011110000100000000000000001; -- addi $15 $1 1

0231 : 00110100000001000000000000000001; -- addi $16 $2 1

0232 : 00110100010001100000000000000001; -- addi $17 $3 1

0233 : 00110100100010000000000000000001; -- addi $18 $4 1 # right shift

0234 : 00110111100000000000000000000011; -- addi $30 $0 3

0235 : 00111110010111100000000000000000; -- lw $25 0($15)

0236 : 01001110011111011111111101011010; -- beq $25 $30 endmove

0237 : 00111110011000000000000000000000; -- lw $25 0($16)

0238 : 01001110011111011111111101011000; -- beq $25 $30 endmove

0239 : 00111110011000100000000000000000; -- lw $25 0($17)

0240 : 01001110011111011111111101010110; -- beq $25 $30 endmove

0241 : 00111110011001000000000000000000; -- lw $25 0($18)

0242 : 01001110011111011111111101010100; -- beq $25 $30 endmove # check whether meet stuck

0243 : 00110110100000000000000000000001; -- addi $26 $0 1 # valid bit = 1

0244 : 01000000000010000000000000000000; -- sw $0 0($4) # original block to be blank(0)

0245 : 01000000000001100000000000000000; -- sw $0 0($3) # original block to be blank(0)

0246 : 01000000000001000000000000000000; -- sw $0 0($2) # original block to be blank(0)

0247 : 01000000000000100000000000000000; -- sw $0 0($1) # original block to be blank(0)

0248 : 00110001000010000000000000000001; -- addi $4 $4 1 # move right

0249 : 01000110100010000000000000000000; -- sw $26 0($4) 

0250 : 00110000110001100000000000000001; -- addi $3 $3 1 # move right

0251 : 01000110100001100000000000000000; -- sw $26 0($3)  

0252 : 00110000100001000000000000000001; -- addi $2 $2 1 # move right

0253 : 01000110100001000000000000000000; -- sw $26 0($2)

0254 : 00110000010000100000000000000001; -- addi $1 $1 1 # move right

0255 : 01000110100000100000000000000000; -- sw $26 0($1)

0256 : 01101000000000000000000000011111; -- jal updateBlock 

0257 : 01100000000000000000000001000111; -- j endmove

0258 : 01100000000000000000000100000010; -- j gameOver

0259 : 01110010110000000000000000000000; -- input $11 # get input always

0260 : 00110110000000000000000001110010; -- addi $24 $0 114

0261 : 01001010111100011111111101000001; -- beq $11 $24 endmove

0262 : 01100000000000000000000100000011; -- j interrupt

0263 : 00110011110000000000000000000011; -- addi $15 $0 3 # constant 3 for stuck################################check whether should we clear##########

0264 : 01000011110000100000000000000000; -- sw $15 0($1)

0265 : 01000011110001000000000000000000; -- sw $15 0($2)

0266 : 01000011110001100000000000000000; -- sw $15 0($3)

0267 : 01000011110010000000000000000000; -- sw $15 0($4)

0268 : 00110100000111011111111111101100; -- addi $16 $14 -20 # start of last line, as h

0269 : 00110011110000000000000000000000; -- addi $15 $0 0 # count for stuck, init and set zero per loop

0270 : 00110100010000000000000000000000; -- addi $17 $0 0 # while2 loop counter j

0271 : 00110110010000000000000000001010; -- addi $25 $0 10 # while2 loop times

0272 : 00110100011000100000000000000001; -- addi $17 $17 1 # while1 loop counter j++

0273 : 00000100101000010001000000000000; -- add $18 $16 $17 # block[h+j], 10-blocks while loop

0274 : 00111100111001000000000000000000; -- lw $19 0($18) # value of block[h+j]

0275 : 00110111100000000000000000000011; -- addi $30 $0 3 # value of 3 ###temp constant 3 will be replaced when loop

0276 : 01001100111111000000000000000011; -- beq $19 $30 counterPlus

0277 : 01010110011000111111111111111010; -- bgt $25 $17 checkClearWhile2 # when 10 > j

0278 : 01001011111100100000000000001000; -- beq $15 $25 clear # when count == 10 call clear

0279 : 01100000000000000000000100011011; -- j clearElse

0280 : 00110011110111100000000000000001; -- addi $15 $15 1 #count for stuck

0281 : 01010110011000111111111111110110; -- bgt $25 $17 checkClearWhile2

0282 : 01001011111100100000000000000100; -- beq $15 $25 clear # when count == 10 call clear

0283 : 00110100001000011111111111110110; -- addi $16 $16 -10

0284 : 00110110101000011111111111100010; -- addi $26 $16 -30 #temp check h-30

0285 : 01010110100110111111111111101111; -- bgt $26 $13 checkClearWhile1 #when N > h - 30

0286 : 01100000000000000000000000101001; -- j mainLoop # back to down function # no need to update

0287 : 00110011000110000000000000001010; -- addi $12 $12 10 #score += 10

0288 : 01111011000000000000000000000000; -- output $12

0289 : 00000110000000010000000000000000; -- add $24 $0 $16 #temp register for store current h value!

0290 : 00110110101000011111111111100010; -- addi $26 $16 -30 #temp check h-30

0291 : 00110111000000000000000000000000; -- addi $28 $0 0 # while loop counter i, used to clear every line, move upper into lower

0292 : 00110111010000000000000000001010; -- addi $29 $0 10 # while loop width

0293 : 00000111101100011100000000000000; -- add $30 $24 $28 # block[h+i]

0294 : 00110001111111011111111111110110; -- addi $7 $30 -10 # h+j -10

0295 : 00111110110011100000000000000000; -- lw $27 0($7) # value of block[h+i-10]

0296 : 01000110111111000000000000000000; -- sw $27 0($30) # value of h+j-10 => addr of h+i

0297 : 00110111001110000000000000000001; -- addi $28 $28 1 # i++

0298 : 01010111011110011111111111111010; -- bgt $29 $28 clearInnerWhile  # i < width

0299 : 00110110001100011111111111110110; -- addi $24 $24 -10 #h -= 10 

0300 : 01010110000110111111111111110110; -- bgt $24 $13 clearWhile 

0301 : 01010110100110111111111111011111; -- bgt $26 $13 checkClearWhile1 # when begin < h - 30

0302 : 01100000000000000000000000101001; -- j mainLoop

0303 : 01000000000000100000000000000000; -- sw $0 0($1)   # rotate type 0, 1, 2, 3 in $5 initial default as 0

0304 : 01000000000001000000000000000000; -- sw $0 0($2) 

0305 : 01000000000001100000000000000000; -- sw $0 0($3)

0306 : 01000000000010000000000000000000; -- sw $0 0($4)  # set current block as blank

0307 : 00110110110000000000000000000000; -- addi $27 $0 0 # variable used to change and measure $6 value 

0308 : 01001001101101100000000000000111; -- beq $6 $27 rotate0 # check which random shape it is!

0309 : 00110110110000000000000000000001; -- addi $27 $0 1

0310 : 01001001101101100000000000001000; -- beq $6 $27 rotate1

0311 : 00110110110000000000000000000010; -- addi $27 $0 2

0312 : 01001001101101100000000000001101; -- beq $6 $27 rotate2

0313 : 00110110110000000000000000000011; -- addi $27 $0 3

0314 : 01001001101101100000000000010010; -- beq $6 $27 rotate3

0315 : 01100000000000000000001000101010; -- j rotateFinish

0316 : 01001001010000000000000000010011; -- beq $5 $0 rotate00 #check type finding real rotate shape

0317 : 00110111100000000000000000000001; -- addi $30 $0 1

0318 : 01001001011111000000000000100011; -- beq $5 $30 rotate01

0319 : 01001001010000000000000000110100; -- beq $5 $0 rotate10 #check type finding real rotate shape

0320 : 00110111100000000000000000000001; -- addi $30 $0 1

0321 : 01001001011111000000000001000000; -- beq $5 $30 rotate11

0322 : 00110111100000000000000000000010; -- addi $30 $0 2

0323 : 01001001011111000000000001001101; -- beq $5 $30 rotate12

0324 : 00110111100000000000000000000011; -- addi $30 $0 3

0325 : 01001001011111000000000001011001; -- beq $5 $30 rotate13

0326 : 01001001010000000000000001101011; -- beq $5 $0 rotate20 #check type finding real rotate shape

0327 : 00110111100000000000000000000001; -- addi $30 $0 1

0328 : 01001001011111000000000001111101; -- beq $5 $30 rotate21

0329 : 00110111100000000000000000000010; -- addi $30 $0 2

0330 : 01001001011111000000000010001111; -- beq $5 $30 rotate22

0331 : 00110111100000000000000000000011; -- addi $30 $0 3

0332 : 01001001011111000000000010100001; -- beq $5 $30 rotate23

0333 : 01001001010000000000000010110100; -- beq $5 $0 rotate30 #check type finding real rotate shape

0334 : 00110111100000000000000000000001; -- addi $30 $0 1

0335 : 01001001011111000000000011000110; -- beq $5 $30 rotate31

0336 : 00000000000000000000000000000000; -- nop

0337 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3   -9 0 9 18

0338 : 00110100000000111111111111110111; -- addi $16 $1 -9 # block[n1-9]

0339 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n1-9]

0340 : 01001100010111100000000011010101; -- beq $17 $15 rotateFinish

0341 : 01001100010111100000000011010100; -- beq $17 $15 rotateFinish

0342 : 00110100000001100000000000001001; -- addi $16 $3 9 # block[n3+9]

0343 : 00111100011000000000000000000000; -- lw $17 0($16)

0344 : 01001100010111100000000011010001; -- beq $17 $15 rotateFinish

0345 : 00110100000010000000000000010010; -- addi $16 $4 18 # block[n4+18]

0346 : 00111100011000000000000000000000; -- lw $17 0($16) 

0347 : 01001100010111100000000011001110; -- beq $17 $15 rotateFinish

0348 : 00110000010000111111111111110111; -- addi $1 $1 -9

0349 : 00110000110001100000000000001001; -- addi $3 $3 9

0350 : 00110001000010000000000000010010; -- addi $4 $4 18

0351 : 00110001010000000000000000000001; -- addi $5 $0 1

0352 : 01100000000000000000001000101010; -- j rotateFinish

0353 : 00000000000000000000000000000000; -- nop

0354 : 00110011110000000000000000000011; -- addi $15 $0 3 # 9 0 -9 -18

0355 : 00110100000000100000000000001001; -- addi $16 $1 9 # block[n1+9]

0356 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n1+9]

0357 : 01001100010111100000000011000100; -- beq $17 $15 rotateFinish

0358 : 00111100010001000000000000000000; -- lw $17 0($2) # value of block[n2]

0359 : 01001100010111100000000011000010; -- beq $17 $15 rotateFinish

0360 : 00110100000001111111111111110111; -- addi $16 $3 -9 # block[n3-9]

0361 : 00111100011000000000000000000000; -- lw $17 0($16) 

0362 : 01001100010111100000000010111111; -- beq $17 $15 rotateFinish

0363 : 00110100000010011111111111101110; -- addi $16 $4 -18 # block[n4-18]

0364 : 00111100011000000000000000000000; -- lw $17 0($16) 

0365 : 01001100010111100000000010111100; -- beq $17 $15 rotateFinish

0366 : 00110000010000100000000000001001; -- addi $1 $1 9

0367 : 00110000110001111111111111110111; -- addi $3 $3 -9

0368 : 00110001000010011111111111101110; -- addi $4 $4 -18

0369 : 00110001010000000000000000000000; -- addi $5 $0 0

0370 : 01100000000000000000001000101010; -- j rotateFinish

0371 : 00000000000000000000000000000000; -- nop

0372 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3   0 0 -11 0

0373 : 00111100010000100000000000000000; -- lw $17 0($1) # value of block[n1]

0374 : 01001100010111100000000010110011; -- beq $17 $15 rotateFinish

0375 : 01001100010111100000000010110010; -- beq $17 $15 rotateFinish

0376 : 00110100000001111111111111110101; -- addi $16 $3 -11 # block[n3-11]

0377 : 00111100011000000000000000000000; -- lw $17 0($16) 

0378 : 01001100010111100000000010101111; -- beq $17 $15 rotateFinish

0379 : 00111100010010000000000000000000; -- lw $17 0($4) 

0380 : 01001100010111100000000010101101; -- beq $17 $15 rotateFinish

0381 : 00110000110001111111111111110101; -- addi $3 $3 -11

0382 : 00110001010000000000000000000001; -- addi $5 $0 1 #go to next state

0383 : 01100000000000000000001000101010; -- j rotateFinish

0384 : 00000000000000000000000000000000; -- nop

0385 : 00000000000000000000000000000000; -- nop

0386 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3  0 0 0 -9

0387 : 00111100010000100000000000000000; -- lw $17 0($1) # value of block[n1]

0388 : 01001100010111100000000010100101; -- beq $17 $15 rotateFinish

0389 : 00111100010001000000000000000000; -- lw $17 0($2) # value of block[n2]

0390 : 01001100010111100000000010100011; -- beq $17 $15 rotateFinish

0391 : 00111100010001100000000000000000; -- lw $17 0($3) 

0392 : 01001100010111100000000010100001; -- beq $17 $15 rotateFinish

0393 : 00110100000010011111111111110111; -- addi $16 $4 -9

0394 : 00111100011000000000000000000000; -- lw $17 0($16)  #block[n4-9]

0395 : 01001100010111100000000010011110; -- beq $17 $15 rotateFinish

0396 : 00110001000010011111111111110111; -- addi $4 $4 -9

0397 : 00110001010000000000000000000010; -- addi $5 $0 2 #go to next state

0398 : 01100000000000000000001000101010; -- j rotateFinish

0399 : 00000000000000000000000000000000; -- nop

0400 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3  11 0 0 0

0401 : 00110100000000100000000000001011; -- addi $16 $1 11

0402 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n1 + 11]

0403 : 01001100010111100000000010010110; -- beq $17 $15 rotateFinish

0404 : 00111100010001000000000000000000; -- lw $17 0($2) # value of block[n2]

0405 : 01001100010111100000000010010100; -- beq $17 $15 rotateFinish

0406 : 00111100010001100000000000000000; -- lw $17 0($3) #block[n3]

0407 : 01001100010111100000000010010010; -- beq $17 $15 rotateFinish

0408 : 00111100010010000000000000000000; -- lw $17 0($4)  #block[n4]

0409 : 01001100010111100000000010010000; -- beq $17 $15 rotateFinish

0410 : 00110000010000100000000000001011; -- addi $1 $1 11

0411 : 00110001010000000000000000000011; -- addi $5 $0 3 #go to next state

0412 : 01100000000000000000001000101010; -- j rotateFinish

0413 : 00000000000000000000000000000000; -- nop

0414 : 00000000000000000000000000000000; -- nop

0415 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3  -11 0 11 9

0416 : 00110100000000111111111111110101; -- addi $16 $1 -11

0417 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n1 - 11]

0418 : 01001100010111100000000010000111; -- beq $17 $15 rotateFinish

0419 : 00111100010001000000000000000000; -- lw $17 0($2) # value of block[n2]

0420 : 01001100010111100000000010000101; -- beq $17 $15 rotateFinish

0421 : 00110100000001100000000000001011; -- addi $16 $3 11

0422 : 00111100011000000000000000000000; -- lw $17 0($16) #block[n3 + 11]

0423 : 01001100010111100000000010000010; -- beq $17 $15 rotateFinish

0424 : 00110100000010000000000000001001; -- addi $16 $4 9

0425 : 00111100011000000000000000000000; -- lw $17 0($16)  #block[n4+9]

0426 : 01001100010111100000000001111111; -- beq $17 $15 rotateFinish

0427 : 00110000010000111111111111110101; -- addi $1 $1 -11

0428 : 00110000110001100000000000001011; -- addi $3 $3 11

0429 : 00110001000010000000000000001001; -- addi $4 $4 9

0430 : 00110001010000000000000000000000; -- addi $5 $0 0 #go to next state

0431 : 01100000000000000000001000101010; -- j rotateFinish

0432 : 00000000000000000000000000000000; -- nop

0433 : 00000000000000000000000000000000; -- nop

0434 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3  22 11 0 -9

0435 : 00110100000000100000000000010110; -- addi $16 $1 22

0436 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n1 + 22]

0437 : 01001100010111100000000001110100; -- beq $17 $15 rotateFinish

0438 : 00110100000001000000000000001011; -- addi $16 $2 11

0439 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n2+11]

0440 : 01001100010111100000000001110001; -- beq $17 $15 rotateFinish

0441 : 00111100010001100000000000000000; -- lw $17 0($3) #block[n3]

0442 : 01001100010111100000000001101111; -- beq $17 $15 rotateFinish

0443 : 00110100000010011111111111110111; -- addi $16 $4 -9

0444 : 00111100011000000000000000000000; -- lw $17 0($16)  #block[n4-9]

0445 : 01001100010111100000000001101100; -- beq $17 $15 rotateFinish

0446 : 00110000010000100000000000010110; -- addi $1 $1 22

0447 : 00110000100001000000000000001011; -- addi $2 $2 11

0448 : 00110000110001100000000000000000; -- addi $3 $3 0

0449 : 00110001000010011111111111110111; -- addi $4 $4 -9

0450 : 00110001010000000000000000000001; -- addi $5 $0 1 #go to next state

0451 : 01100000000000000000001000101010; -- j rotateFinish

0452 : 00000000000000000000000000000000; -- nop

0453 : 00000000000000000000000000000000; -- nop

0454 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3  18 9 0 11

0455 : 00110100000000100000000000010010; -- addi $16 $1 18

0456 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n1 + 18]

0457 : 01001100010111100000000001100000; -- beq $17 $15 rotateFinish

0458 : 00110100000001000000000000001001; -- addi $16 $2 9

0459 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n2+9]

0460 : 01001100010111100000000001011101; -- beq $17 $15 rotateFinish

0461 : 00111100010001100000000000000000; -- lw $17 0($3) #block[n3]

0462 : 01001100010111100000000001011011; -- beq $17 $15 rotateFinish

0463 : 00110100000010000000000000001011; -- addi $16 $4 11

0464 : 00111100011000000000000000000000; -- lw $17 0($16)  #block[n4+11]

0465 : 01001100010111100000000001011000; -- beq $17 $15 rotateFinish

0466 : 00110000010000100000000000010010; -- addi $1 $1 18

0467 : 00110000100001000000000000001001; -- addi $2 $2 9

0468 : 00110000110001100000000000000000; -- addi $3 $3 0

0469 : 00110001000010000000000000001011; -- addi $4 $4 11

0470 : 00110001010000000000000000000010; -- addi $5 $0 2 #go to next state

0471 : 01100000000000000000001000101010; -- j rotateFinish

0472 : 00000000000000000000000000000000; -- nop

0473 : 00000000000000000000000000000000; -- nop

0474 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3  -22 -11 0 9

0475 : 00110100000000111111111111101010; -- addi $16 $1 -22

0476 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n1 -22]

0477 : 01001100010111100000000001001100; -- beq $17 $15 rotateFinish

0478 : 00110100000001011111111111110101; -- addi $16 $2 -11

0479 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n2-11]

0480 : 01001100010111100000000001001001; -- beq $17 $15 rotateFinish

0481 : 00111100010001100000000000000000; -- lw $17 0($3) #block[n3]

0482 : 01001100010111100000000001000111; -- beq $17 $15 rotateFinish

0483 : 00110100000010000000000000001001; -- addi $16 $4 9

0484 : 00111100011000000000000000000000; -- lw $17 0($16)  #block[n4+9]

0485 : 01001100010111100000000001000100; -- beq $17 $15 rotateFinish

0486 : 00110000010000111111111111101010; -- addi $1 $1 -22

0487 : 00110000100001011111111111110101; -- addi $2 $2 -11

0488 : 00110000110001100000000000000000; -- addi $3 $3 0

0489 : 00110001000010000000000000001001; -- addi $4 $4 9

0490 : 00110001010000000000000000000011; -- addi $5 $0 3 #go to next state

0491 : 01100000000000000000001000101010; -- j rotateFinish

0492 : 00000000000000000000000000000000; -- nop

0493 : 00000000000000000000000000000000; -- nop

0494 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3  -18 -9 0 -11

0495 : 00110100000000111111111111101110; -- addi $16 $1 -18

0496 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n1 + 18]

0497 : 01001100010111100000000000111000; -- beq $17 $15 rotateFinish

0498 : 00110100000001011111111111110111; -- addi $16 $2 -9

0499 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n2+9]

0500 : 01001100010111100000000000110101; -- beq $17 $15 rotateFinish

0501 : 00111100010001100000000000000000; -- lw $17 0($3) #block[n3]

0502 : 01001100010111100000000000110011; -- beq $17 $15 rotateFinish

0503 : 00110100000010011111111111110101; -- addi $16 $4 -11

0504 : 00111100011000000000000000000000; -- lw $17 0($16)  #block[n4-11]

0505 : 01001100010111100000000000110000; -- beq $17 $15 rotateFinish

0506 : 00110000010000111111111111101110; -- addi $1 $1 -18

0507 : 00110000100001011111111111110111; -- addi $2 $2 -9

0508 : 00110000110001100000000000000000; -- addi $3 $3 0

0509 : 00110001000010011111111111110101; -- addi $4 $4 -11

0510 : 00110001010000000000000000000000; -- addi $5 $0 0 #go to next state

0511 : 01100000000000000000001000101010; -- j rotateFinish

0512 : 00000000000000000000000000000000; -- nop

0513 : 00000000000000000000000000000000; -- nop

0514 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3  11 20 -9 0

0515 : 00110100000000100000000000001011; -- addi $16 $1 11

0516 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n1 + 11]

0517 : 01001100010111100000000000100100; -- beq $17 $15 rotateFinish

0518 : 00110100000001000000000000010100; -- addi $16 $2 20

0519 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n2+20]

0520 : 01001100010111100000000000100001; -- beq $17 $15 rotateFinish

0521 : 00110100000001111111111111110111; -- addi $16 $3 -9

0522 : 00111100011000000000000000000000; -- lw $17 0($16) #block[n3-9]

0523 : 01001100010111100000000000011110; -- beq $17 $15 rotateFinish

0524 : 00111100010010000000000000000000; -- lw $17 0($4)  #block[n4]

0525 : 01001100010111100000000000011100; -- beq $17 $15 rotateFinish

0526 : 00110000010000100000000000001011; -- addi $1 $1 11

0527 : 00110000100001000000000000010100; -- addi $2 $2 20

0528 : 00110000110001111111111111110111; -- addi $3 $3 -9

0529 : 00110001000010000000000000000000; -- addi $4 $4 0

0530 : 00110001010000000000000000000001; -- addi $5 $0 1 #go to next state

0531 : 01100000000000000000001000101010; -- j rotateFinish

0532 : 00000000000000000000000000000000; -- nop

0533 : 00000000000000000000000000000000; -- nop

0534 : 00110011110000000000000000000011; -- addi $15 $0 3 #constant 3  -11 -20 9 0

0535 : 00110100000000111111111111110101; -- addi $16 $1 -11

0536 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n1 -11 ]

0537 : 01001100010111100000000000010000; -- beq $17 $15 rotateFinish

0538 : 00110100000001011111111111101100; -- addi $16 $2 -20

0539 : 00111100011000000000000000000000; -- lw $17 0($16) # value of block[n2-20]

0540 : 01001100010111100000000000001101; -- beq $17 $15 rotateFinish

0541 : 00110100000001100000000000001001; -- addi $16 $3 9

0542 : 00111100011000000000000000000000; -- lw $17 0($16) #block[n3+9]

0543 : 01001100010111100000000000001010; -- beq $17 $15 rotateFinish

0544 : 00111100010010000000000000000000; -- lw $17 0($4)  #block[n4]

0545 : 01001100010111100000000000001000; -- beq $17 $15 rotateFinish

0546 : 00110000010000111111111111110101; -- addi $1 $1 -11

0547 : 00110000100001011111111111101100; -- addi $2 $2 -20

0548 : 00110000110001100000000000001001; -- addi $3 $3 9

0549 : 00110001000010000000000000000000; -- addi $4 $4 0

0550 : 00110001010000000000000000000000; -- addi $5 $0 0 #go to next state

0551 : 01100000000000000000001000101010; -- j rotateFinish

0552 : 00000000000000000000000000000000; -- nop

0553 : 00000000000000000000000000000000; -- nop # deal with translator error

0554 : 00110011110000000000000000000001; -- addi $15 $0 1 #finish set valid and update

0555 : 01000011110000100000000000000000; -- sw $15 0($1)

0556 : 01000011110001000000000000000000; -- sw $15 0($2)

0557 : 01000011110001100000000000000000; -- sw $15 0($3)

0558 : 01000011110010000000000000000000; -- sw $15 0($4)

0559 : 01101000000000000000000000011111; -- jal updateBlock

0560 : 01100000000000000000000001000111; -- j endmove

0561 : 01011111110000000000000000000000; -- jr $31

0562 : 00000000000000000000000000000000; -- nop

0563 : 00110111100000000000000000000001; -- addi $30 $0 1

0564 : 00101010010100111110000000000000; -- srl $9 $9 $30

0565 : 01100000000000000000000001000111; -- j endmove  

[0566..4095] : 00000000000000000000000000000000;
END;
